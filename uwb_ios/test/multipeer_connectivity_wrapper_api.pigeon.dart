// Autogenerated from Pigeon (v2.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis
// ignore_for_file: avoid_relative_lib_imports
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;
import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import '../lib/src/multipeer_connectivity/multipeer_connectivity_wrapper_api.pigeon.dart';

class _TestMCNearbyServiceAdvertiserHostApiCodec extends StandardMessageCodec {
  const _TestMCNearbyServiceAdvertiserHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MCPeerIDWrapper) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return MCPeerIDWrapper.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class TestMCNearbyServiceAdvertiserHostApi {
  static const MessageCodec<Object?> codec = _TestMCNearbyServiceAdvertiserHostApiCodec();

  void create(int instanceId, MCPeerIDWrapper peerId, Map<String?, String?>? info, String serviceType);
  void dispose(int instanceId);
  void registerDelegate(int instanceId);
  void removeDelegate(int instanceId);
  void startAdvertisingPeer(int instanceId);
  void stopAdvertisingPeer(int instanceId);
  static void setup(TestMCNearbyServiceAdvertiserHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.create', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.create was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_instanceId = (args[0] as int?);
          assert(arg_instanceId != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.create was null, expected non-null int.');
          final MCPeerIDWrapper? arg_peerId = (args[1] as MCPeerIDWrapper?);
          assert(arg_peerId != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.create was null, expected non-null MCPeerIDWrapper.');
          final Map<String?, String?>? arg_info = (args[2] as Map<Object?, Object?>?)?.cast<String?, String?>();
          assert(arg_info != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.create was null, expected non-null Map<String?, String?>.');
          final String? arg_serviceType = (args[3] as String?);
          assert(arg_serviceType != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.create was null, expected non-null String.');
          api.create(arg_instanceId!, arg_peerId!, arg_info!, arg_serviceType!);
          return <Object?, Object?>{};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.dispose', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.dispose was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_instanceId = (args[0] as int?);
          assert(arg_instanceId != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.dispose was null, expected non-null int.');
          api.dispose(arg_instanceId!);
          return <Object?, Object?>{};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.registerDelegate', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.registerDelegate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_instanceId = (args[0] as int?);
          assert(arg_instanceId != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.registerDelegate was null, expected non-null int.');
          api.registerDelegate(arg_instanceId!);
          return <Object?, Object?>{};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.removeDelegate', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.removeDelegate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_instanceId = (args[0] as int?);
          assert(arg_instanceId != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.removeDelegate was null, expected non-null int.');
          api.removeDelegate(arg_instanceId!);
          return <Object?, Object?>{};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.startAdvertisingPeer', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.startAdvertisingPeer was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_instanceId = (args[0] as int?);
          assert(arg_instanceId != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.startAdvertisingPeer was null, expected non-null int.');
          api.startAdvertisingPeer(arg_instanceId!);
          return <Object?, Object?>{};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.stopAdvertisingPeer', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.stopAdvertisingPeer was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_instanceId = (args[0] as int?);
          assert(arg_instanceId != null, 'Argument for dev.flutter.pigeon.MCNearbyServiceAdvertiserHostApi.stopAdvertisingPeer was null, expected non-null int.');
          api.stopAdvertisingPeer(arg_instanceId!);
          return <Object?, Object?>{};
        });
      }
    }
  }
}
